node {

  // Pulling the docker builder image
  stage('docker pull the geOrchestra builder image') {
    sh 'docker pull georchestra/jenkins-builder:sid-jdk-8'
  }
  stage('build') {
    withDockerContainer(image: 'georchestra/jenkins-builder:sid-jdk-8', args: """--privileged -u 0:0   \
  -v /var/www/packages.georchestra.org/htdocs:/var/www/packages.georchestra.org/htdocs \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v /home/jenkins-tools/gnupg:/root/.gnupg""") {
      stage('Checking out the geOrchestra repository') {
        checkout([ $class: 'GitSCM',
                   branches: [[name: '*/master']],
                   doGenerateSubmoduleConfigurations: false,
                   extensions: [[ $class: 'SubmoduleOption',
                                  disableSubmodules: false,
                                  parentCredentials: false,
                                  recursiveSubmodules: true,
                                  reference: '',
                                  trackingSubmodules: false]],
                   submoduleCfg: [],
                   userRemoteConfigs: [[url: 'https://github.com/georchestra/georchestra.git']]
                ])
        // This is specific to the geOrchestra build env and is probably not needed
        sh 'echo "172.16.42.42 packages.georchestra.org" >> /etc/hosts'
      }

      stage('configure georchestra docker-hub account / login on docker-hub') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'geor-docker-hub',
              usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            def configXmlStr = """<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
              http://maven.apache.org/xsd/settings-1.0.0.xsd">
                <mirrors>
                  <mirror>
                    <id>artifactory</id>
                    <mirrorOf>*</mirrorOf>
                    <url>https://packages.georchestra.org/artifactory/maven</url>
                  </mirror>
                </mirrors>
                <servers>
                  <server>
                    <id>docker-hub</id>
                    <username>USERNAME</username>
                    <password>PASSWORD</password>
                    <configuration>
                      <email>psc@georchestra.org</email>
                    </configuration>
                  </server>
                </servers>
              </settings>""".replaceAll("USERNAME", env.USERNAME).replaceAll("PASSWORD", env.PASSWORD)
            sh "echo '${configXmlStr}' > /config.xml"
            sh "docker login -u ${env.USERNAME} -p '${env.PASSWORD}'"
        }
      }

      stage('build mandatory modules') {
        sh """mvn clean install -B -Dmaven.repo.local=./.m2_repo -s /config.xml --non-recursive"""
        sh """mvn clean install -B -Dmaven.repo.local=./.m2_repo -s /config.xml -pl commons,ogc-server-statistics"""
      }

      stage('build / refresh geoserver & geonetwork artifacts') {
        // first time without tests
        sh """mvn clean install  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -f geonetwork/pom.xml -DskipTests """
        // second time with tests
        sh """mvn clean install  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -f geonetwork/pom.xml """
        sh """mvn clean install  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -f geoserver/pom.xml  """
      }

      stage('build / publish geOr images') {
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker  -pl atlas,extractorapp,security-proxy,mapfishapp \
                -DdockerImageName='georchestra/\${project.artifactId}:latest'"""
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker  -pl header,console,analytics \
                -DdockerImageName='georchestra/\${project.artifactId}:latest'"""

        // then build the other images
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker -pl cas-server-webapp -DdockerImageName=georchestra/cas:latest"""
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker -pl geoserver/webapp -DdockerImageName=georchestra/geoserver:latest"""
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker -pl geonetwork/web -DdockerImageName=georchestra/geonetwork:latest"""
        sh """mvn clean package docker:build docker:push  -B -Dmaven.repo.local=./.m2_repo -s /config.xml -Pdocker -pl geowebcache-webapp -DdockerImageName=georchestra/geowebcache:latest"""
      } // stage

      stage("Saving tests results") {
        // this requires the Junit Jenkins module
        junit '**/target/surefire-reports/TEST-*.xml'
      } // stage

      stage('Spawning ansible remotely onto sdi.g.o') {
        sshagent(["ansible-docker-trigger-key"]) {
          sh "ssh -oStrictHostKeyChecking=no root@172.16.42.42"
        } // sshagent
      } // stage
    } // withDocker
  } // stage
} // node
