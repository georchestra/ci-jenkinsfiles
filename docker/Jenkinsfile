node {
  // Pulling the docker builder image
  stage('docker pull the geOrchestra builder image') {
    sh 'docker pull georchestra/jenkins-builder'
  }
  stage('build') {
    withDockerContainer(image: 'georchestra/jenkins-builder', args: """--privileged -u 0:0   \
  -v /var/www/packages.georchestra.org/htdocs:/var/www/packages.georchestra.org/htdocs \
  -v /home/jenkins-tools/gnupg:/root/.gnupg -v /home/jenkins-tools/m2_master:/root/.m2""") {
      stage('Checking out the geOrchestra repository') {
        git url:'https://github.com/georchestra/georchestra.git', branch:"master" // fsck it c2c-geospatial
        sh "git submodule update --init --recursive"
        sh 'service docker start'
      }
      stage('configure georchestra docker-hub account / login on docker-hub') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'geor-docker-hub',
              usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            def configXmlStr = """<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
              http://maven.apache.org/xsd/settings-1.0.0.xsd">
                <servers>
                  <server>
                    <id>docker-hub</id>
                    <username>USERNAME</username>
                    <password>PASSWORD</password>
                    <configuration>
                      <email>psc@georchestra.org</email>
                    </configuration>
                  </server>
                </servers>
              </settings>""".replaceAll("USERNAME", env.USERNAME).replaceAll("PASSWORD", env.PASSWORD)
            sh "echo '${configXmlStr}' > /config.xml"
            sh "docker login -u ${env.USERNAME} -p '${env.PASSWORD}'"
        }
      }
      stage('build mandatory modules') {
        sh """mvn  -Dmaven.test.failure.ignore clean install --non-recursive"""
        sh """mvn clean install -pl config -Dmaven.javadoc.failOnError=false"""
        sh """mvn clean install -pl commons,epsg-extension,ogc-server-statistics \
              -Dmaven.javadoc.failOnError=false"""
      }
      stage('build / refresh geoserver & geonetwork artifacts') {
        sh """mvn clean install -f geonetwork/pom.xml -DskipTests"""
        sh """mvn clean install -pl geoserver"""
      }
      stage('build / publish geOr images') {
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl atlas,extractorapp,security-proxy,mapfishapp"""
        // There is a 10GB limit in docker containers, we need to free some space
        // between images generation ...
        sh """docker rmi georchestra/atlas:latest georchestra/extractorapp:latest georchestra/security-proxy:latest georchestra/mapfishapp:latest"""
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl header,ldapadmin,analytics,catalogapp,downloadform -DdockerImageName='georchestra/\${project.artifactId}:latest'"""
        sh """docker rmi georchestra/header:latest georchestra/ldapadmin:latest georchestra/analytics:latest georchestra/catalogapp:latest georchestra/downloadform:latest"""

        // then build the other images
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl cas-server-webapp -DdockerImageName=georchestra/cas:latest"""
        sh """docker rmi georchestra/cas:latest"""
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl geoserver/webapp -DdockerImageName=georchestra/geoserver:latest"""
        sh """docker rmi georchestra/geoserver:latest"""
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl geonetwork/web -DdockerImageName=georchestra/geonetwork:3-latest"""
        sh """docker rmi georchestra/geonetwork:3-latest"""
        sh """mvn clean package docker:build docker:push -s /config.xml -Pdocker -DskipTests -fae -pl geowebcache-webapp -DdockerImageName=georchestra/geowebcache:latest"""
        sh """docker rmi georchestra/geowebcache:latest"""
      } // stage
      stage('build postgresql geOr image') {
        sh """cd ${WORKSPACE}/postgresql                     \
              docker build -t georchestra/database:latest .  \
              docker push georchestra/database:latest        \
              cd ${WORKSPACE}"""
      } //stage
      stage("build ldap geOr image") {
        sh """cd ${WORKSPACE}/ldap                            \
              docker build -t georchestra/ldap:latest .       \
              docker push georchestra/ldap:latest             \
              cd ${WORKSPACE}"""
      } // stage
    } // withDocker
  } // stage
} // node
