node {
  // Pulling the docker builder image
  stage('docker pull the geOrchestra builder image') {
    sh 'docker pull georchestra/jenkins-builder'
  }
  // blocks to be executed in parallel
  stage('spawning builder for debian packages') {
    withDockerContainer(image: 'georchestra/jenkins-builder', args: """--privileged -u 0:0   \
  -v /var/www/packages.georchestra.org/htdocs:/var/www/packages.georchestra.org/htdocs \
  -v /home/jenkins-tools/gnupg:/root/.gnupg -v /home/jenkins-tools/m2_master:/root/.m2""") {

      stage('Configuring things up & checking out the geOrchestra repository') {
        git url:'https://github.com/georchestra/georchestra.git', branch:"sandbox"
        sh "git config --global user.email 'psc@georchestra.org'"
        sh "git config --global user.name 'geOrchestra PSC'"
        sh "git submodule update --init --recursive"
        sh 'service docker start'
      }
      stage('build mandatory modules') {
        sh """mvn clean install -fn --non-recursive"""
        sh """mvn clean install -pl config -fn"""
        sh """mvn clean install -fn -pl commons,epsg-extension,ogc-server-statistics"""
      }
      stage('build / refresh geoserver & geonetwork artifacts') {
        sh """mvn clean install -f geonetwork/pom.xml -fn"""
        sh """mvn clean install -pl geoserver -fn"""
      }
      stage("build debian packages") {
        sh """mvn package deb:package deb:deploy                                                                                                                                         \
              -pl atlas,catalogapp,cas-server-webapp,downloadform,security-proxy,header,mapfishapp,extractorapp,analytics,geoserver/webapp,ldapadmin,geonetwork/web,geowebcache-webapp   \
              -PdebianPackage -fn                                                                                                                                                        \
              -Ddeb.repository.location=/var/www/packages.georchestra.org/htdocs/debian                                                                                                  \
              -Ddeb.reprepro.config=/var/www/packages.georchestra.org/htdocs/debian/conf                                                                                                 \
              -Ddeb.repository.branch=sandbox -Ddeb.package.version='sandbox+\${env.BUILD_NUMBER}'"""
      } // stage
      stage("Saving tests results") {
        // this requires the Junit Jenkins module
        junit '**/target/surefire-reports/TEST-*.xml'
      } // stage
    } // withDocker
  } // stage

// TODO might deserve another script, but deactivating for now

//  stage('Spawning ansible remotely onto sdi.g.o') {
//      sshagent(["ansible-trigger-key"]) {
//          sh "ssh -oStrictHostKeyChecking=no root@172.16.42.42"
//      } // sshagent
//  } // stage
} // node
